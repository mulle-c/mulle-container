#ifndef mulle_container_include_h__
#define mulle_container_include_h__

/* This is a central include file to keep dependencies out of the library
   C files. It is usally included by .h files only.

   The advantage is that now .c and .h files become motile. They can
   be moved to other projects and don't need to be edited. Also less typing...

   Therefore it is important that this file is called "include.h" and
   not "mulle-container-include.h" to keep the #include statements in the
   library code uniform.

   The C-compiler will pick up the nearest one.
*/

/* Include the header file automatically generated by c-sourcetree-update.
   Here the prefix is harmless and serves disambiguation. If you have no
   sourcetree, then you don't need it.
 */

// if compiling with NDEBUG, we don't do the asserts so we can leave it out.
// this is painful, when you mix different libraries though that are compiled
// differently. So we keep the fields in the actual structs constants but
// unused unless you define MULLE__CONTAINER_MISER_MODE
//
#ifndef MULLE__CONTAINER_HAVE_MUTATION_COUNT
# ifdef NDEBUG
#  define MULLE__CONTAINER_HAVE_MUTATION_COUNT  0
# else
#  define MULLE__CONTAINER_HAVE_MUTATION_COUNT  1
# endif
#endif

#if ! MULLE__CONTAINER_HAVE_MUTATION_COUNT || defined( NDEBUG)
# define MULLE__CONTAINER_MUTATION_NDEBUG
#endif

#if MULLE__CONTAINER_HAVE_MUTATION_COUNT && defined( MULLE__CONTAINER_MISER_MODE)
# error "You can't define MULLE__CONTAINER_MISER_MODE and also have MULLE__CONTAINER_HAVE_MUTATION_COUNT enabled"
#endif


#include "_mulle-container-include.h"

#ifdef MULLE__CONTAINER_BUILD
# define MULLE__CONTAINER_GLOBAL    MULLE_C_GLOBAL
#else
# if defined( MULLE_CONTAINER_INCLUDE_DYNAMIC) || (defined( MULLE_INCLUDE_DYNAMIC) && ! defined( MULLE_CONTAINER_INCLUDE_STATIC))
#  define MULLE__CONTAINER_GLOBAL   MULLE_C_EXTERN_GLOBAL
# else
#  define MULLE__CONTAINER_GLOBAL   extern
# endif
#endif


/* You can add some more include statements here */

#endif
